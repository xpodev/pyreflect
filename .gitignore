# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# CMake
CMakeFiles/
CMakeCache.txt
CMakeScripts/
CTestTestfile.cmake

# Poetry
#   According to https://python-poetry.org/docs/glossary/#lock-file
#   it is recommended to include poetry.lock in version control.
#   However, in case of collaboration, if having a library (e.g. in "path" dependency)
#   that has not been published on PyPi, the library code may not be present in the
#   repository, causing the installation to fail.
#poetry.lock

# Pylance
#   Pylance is an extension for Visual Studio Code, and includes a set of files that
#   should be excluded from git repositories, along with other IDE-specific files.
#   For more details, see: https://github.com/microsoft/pylance-release/blob/main/LICENSE.txt
.pylance/

# Rope project settings
.ropeproject

# Sublime Text
#   Cache files for Sublime Text
#   When using Sublime Text >= 3.1, please also add *.sublime-workspace
*.sublime-project
*.sublime-workspace

# Visual Studio Code
.vscode/
# Add `.env` to the list if you are using Visual Studio Code's `python-auto-venv` extension.
.env

# wxGlade
#   Files generated by wxGlade (a wxWidgets GUI builder)
*.wxg

# Xcode
#   Xcode automatically generates some files, including Core Data files
*.xccheckout
*.xcworkspace
*.xcuserstate
*.xcscmblueprint

# Android Studio
#   Android Studio automatically generates Gradle files, .idea folder, and build output
.idea/
.gradle/
/build/
/*/build/
/captures/
.externalNativeBuild/
*.iml
*.ipr
*.iws
*.apk
*.ap_

# IntelliJ IDEA
#   IntelliJ IDEA automatically generates build/ and .idea folders
#   Comment next line if you don't want to check your idea project files.
#   !/.idea/workspace.xml
.idea/
*.iml
*.ipr
*.iws
out/

# Eclipse
#   Eclipse automatically generates .metadata folder
.metadata
bin/
tmp/
*.tmp
*.bak
*.swp
*~.nib
local.properties
.settings/
.loadpath
.recommenders

# NetBeans
#   NetBeans automatically generates build/ and nbproject folders
build/
nbbuild/
dist/
nbdist/
.nb-gradle/
.cache/
.noindex/
# End of https://www.toptal.com/developers/gitignore/api/python

# PyCharm
#   PyCharm automatically generates .idea folder
.idea/

# Jupyter Notebook
.ipynb_checkpoints/

# IPython
.ipython/

# pyenv
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# CMake
CMakeFiles/
CMakeCache.txt
CMakeScripts/
CTestTestfile.cmake

# Poetry
#   According to https://python-poetry.org/docs/glossary/#lock-file
#   it is recommended to include poetry.lock in version control.
#   However, in case of collaboration, if having a library (e.g. in "path" dependency)
#   that has not been published on PyPi, the library code may not be present in the
#   repository, causing the installation to fail.
#poetry.lock

# Pylance
#   Pylance is an extension for Visual Studio Code, and includes a set of files that
#   should be excluded from git repositories, along with other IDE-specific files.
#   For more details, see: https://github.com/microsoft/pylance-release/blob/main/LICENSE.txt
.pylance/

# Rope project settings
.ropeproject

# Sublime Text
#   Cache files for Sublime Text
#   When using Sublime Text >= 3.1, please also add *.sublime-workspace
*.sublime-project
*.sublime-workspace

# Visual Studio Code
.vscode/
# Add `.env` to the list if you are using Visual Studio Code's `python-auto-venv` extension.
.env

# wxGlade
#   Files generated by wxGlade (a wxWidgets GUI builder)
*.wxg

# Xcode
#   Xcode automatically generates some files, including Core Data files
*.xccheckout
*.xcworkspace
*.xcuserstate
*.xcscmblueprint

# Android Studio
#   Android Studio automatically generates Gradle files, .idea folder, and build output
.idea/
.gradle/
/build/
/*/build/
/captures/
.externalNativeBuild/
*.iml
*.ipr
*.iws
*.apk
*.ap_

# IntelliJ IDEA
#   IntelliJ IDEA automatically generates build/ and .idea folders
#   Comment next line if you don't want to check your idea project files.
#   !/.idea/workspace.xml
.idea/
*.iml
*.ipr
*.iws
out/

# Eclipse
#   Eclipse automatically generates .metadata folder
.metadata
bin/
tmp/
*.tmp
*.bak
*.swp
*~.nib
local.properties
.settings/
.loadpath
.recommenders

# NetBeans
#   NetBeans automatically generates build/ and nbproject folders
build/
nbbuild/
dist/
nbdist/
.nb-gradle/
.cache/
.noindex/
# End of https://www.toptal.com/developers/gitignore/api/python


.lh/
.vscode/
